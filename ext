#!/bin/bash
#
#/*  Build date : WED,OCT-12,2016
# *  Modified   : ‎Thursday, ‎October ‎13, ‎2016
# *  author     : matrix , dxdia 
# *  DONT'T MESS WITH THE SCRIPTS UNLESS YOU DON'T KNOW
# *  WHAT YOU ARE DOING!
# *  /

#  ////////FUNCTIONS/////////
EXT_CHECK() {
if [ ! -e tools ]
  then
    clear
	echo
    echo "     Folder 'tools' not found , the extractor won't  " 
    echo "     work , unless you place it in right order       "
	exit 0
  fi
 
if [ ! -e ext ]
  then
    clear
	echo
    echo "     Don't modify or reaname script ext , it is associated  " 
    echo "     with all functions/folders , so just do ./ext don't kid"
	exit 0
fi
  
#Check for python - installed OR NOT
#PYTHON IS REQUIRED
CHK=`python --version 2>/dev/null`
OBT=$?
  if [ "$OBT" == "127" ]
   then
     clear
     echo
     echo
     echo "      Python is not installed , please install python"
	 echo
     echo "      otherwise extractor won't work                 "
     echo
	 read -p ""
     exit 0
  fi

CHK=`java -version 2>/dev/null`
OBT=$?
   OBT=$?
  if [ "$OBT" == "127" ]
   then
     clear
     echo
     echo
     echo "      JAVA SDK is not installed , please install JAVA"
	 echo
     echo "      DEVELOPMENT KIT , it is required to SIGN FILES "
	 echo
     read -p "      Ignore and continue (y/n) : " OPTN
       if [ "$OPTN" == "y"]
         then
	     L_JAVA=0
	    else
         exit 0
       fi	   
  fi



} 


cecho ()
   { 
   #Case didn't work out for me in cygwin 
   if [ "$1" == "R" ]
then
  echo -e "$2""\033[0;91m$3\033[0m""$4" # Red
elif  [ "$1" == "G" ]
then 
  echo -e "$2""\033[0;92m$3\033[0m""$4" # Green
elif  [ "$1" == "Y" ]
then 
  echo -e "$2""\033[0;93m$3\033[0m""$4" # Yellow 
elif  [ "$1" == "B" ]
then 
  echo -e "$2""\033[0;94m$3\033[0m""$4" # Blue
elif  [ "$1" == "P" ]
then 
  echo -e "$2""\033[0;95m$3\033[0m""$4" # Purple
elif  [ "$1" == "C" ]
then 
  echo -e "$2""\033[0;96m$3\033[0m""$4" # Cyan
elif  [ "$1" == "W" ]
then 
  echo -e "$2""\033[0;97m$3\033[0m""$4" # White
 fi
}



E_DAT() {
   
   if [ ! -e extract ]
   then
     mkdir extract
   fi
   clear
   echo
   echo   "::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   echo   "::                                                  ::"
   echo -e  "::  Copy " "\033[0;92msystem.new.dat\033[0m"" , ""\033[0;92msystem.transfer.list\033[0m""     ::"
   echo   "::                                                  ::"
   echo -e  "::   " " to ""\033[0;97mextract\033[0m"" folder.                           ::" 
   echo   "::                                                  ::"
   echo   "::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   echo
   read -p "Hit Enter to continue"
   #Usless part
   clear
    if [ ! -f "extract/system.new.dat" ]
	  then
	  echo
      cecho R " File" " system.new.dat " "does not exist!"
      echo
	  #Yea this time for real copy the godamn file
      echo    " For real Copy system.new.dat to extract folder"
      echo
	  read -p ""
	  EXT_MAIN	  
     fi
	 if [ ! -f "extract/system.transfer.list" ]
	  then
	  echo
      cecho R " File" " system.transfer.list " "does not exist!"
      echo
      echo    " For real Copy system.transfer.list to extract folder"
      echo
	  read -p ""
	  EXT_MAIN	  
     fi
	 
	if [ -f "extract/system.new.dat" ]
	  then
	    if [ -f "extract/system.transfer.list" ]
	     then
	       echo
	      echo  "Found system.new.dat & system.transfer.list"
	      echo
	      sleep 0.5
	      echo  "converting system.new.dat to system.img(ext4 format) "
          cp tools/UN_AF/sdat2img.py extract
	      cd extract
	      python sdat2img.py system.transfer.list system.new.dat system.img
	      cd ..
	        if [ -f "extract/system.img" ]
	         then
		      cd extract
		      rm -f system.new.dat
			  rm -f system.transfer.list
              rm -f sdat2img.py			
              cd ..            
			   if [ `uname | grep Linux` ]
                     then
					   cd extract
                       echo
                       cecho W "" "  Mounting system.img to output folder"
                       echo					   
					   echo  "  Linux users mount of system.img will or will not work"
				       echo
				       read -p "  Hit Enter to continue to try mount"
					   echo
				   	   sudo mount -t ext4 -o loop system.img output/
					   echo
					   echo  "   IF MOUNTED then DONE else sorry, please find another"
					   echo
					   echo  "   Method for mounting system.img, IN LINUX ANYTHING IS POSSIBLE"
					   echo
				       read -p "   ALL DONE HIT ENTER TO CONTINUE TO MENU"
					   cd ..
					   EXT_MAIN
			
                     elif [ `uname | grep CYGWIN` ]
                       then 
				        cp tools/Cygwin/ImgExtractor.exe extract
				        cd extract
						echo
						cecho W "" "   Converting system.img to system_ folder"
						sleep 1
                        ./ImgExtractor.exe system.img -i
				        if [ -e system_ ]
				         then 
				          rm -f ImgExtractor.exe
					      echo  
				          echo  "   Extracted system.img to system_ folder"
					      echo
                          read -p "   ALL DONE HIT ENTER TO CONTINUE TO MENU"
						  echo
						  echo
				          cd ..
					      EXT_MAIN				   
                        fi
			    fi
	        fi
	    fi  
	fi   
	
}

	
UN_MNT() {
    clear
	echo 
	echo  "  This section is for Unmounting output folder  "
	echo
	echo  "  which is mounted during extraction of DAT"
	echo
	read -p "  Hit enter to continue"
   if [ -e "extract/output" ]
    then
	 clear
     cd extract
     echo "  Trying to Unmount system.img IF MOUNTED in output folder"
     echo
	 read -p "  Hit enter to try "
	 echo
     sudo umount output/
     echo
     echo  "    DONE    "
     echo 
	 read enter
     cd ..
	 EXT_MAIN
     elif [ -e output ]
      then 
	  echo "  Trying to Unmount system.img IF MOUNTED in output folder"
      echo
	  read -p "Hit enter to try "
	  echo
      sudo umount output/
      echo
      echo  "    DONE    "
      echo
	  read enter
	  EXT_MAIN
   fi
 }
	

R_DAT() {

echo "HI"
}

SIGN_ZIP() {
  if [ "$L_JAVA" == "0" ]
    then 
	 clear
	 echo
	 echo
	 echo  "    JAVA IS NOT INSTALLED , So zip signing will   "
	 echo
	 echo  "    not work unless you install JAVA SE DEVLOPMENT"
     echo
	 echo  "    -KIT 7 or higher, on your current OS/platform "
	 echo
	 read -p ""
     EXT_MAIN
   fi
   
  mkdir sign_files
  echo
  echo "   Place your ZIP file into the sign_files folder "
  cd sign_files
  S_ZIP=`find . | grep -i \\.zip$ | sort -f`
  cd ..
  if [ "$S_ZIP" != " " ]
    then
	 filename=`echo $S_ZIP | sed -e 's/\.\///g'`
	 cp ../tools/SIGN_TOOLS/testkey.* .
     cp ../tools/SIGN_TOOLS/signapk.jar .

  
  
}
	
EXT_START() {
  clear
  echo
  echo
  cecho W "" "                        Marshmallow/Lollipop             "
  cecho W "" "                     System extractor & repack           "
  cecho G "                           (" "by matrix" ")"               
  cecho C "" "                                                     $DATE_STR"
  echo 
  cecho W "" "    Menu"
  echo
  cecho C "    1 - " "Unpack" " system.new.dat"
  echo
  cecho C "    2 - " "Repack" " system.new.dat"
  echo 
  cecho C "    3 - " "Unpack" " system.img"
  echo 
  cecho C "    4 - " "Sign" " ZIP files"
  echo
  cecho C "    u - " "Unmount" " output"
  echo
  cecho C "    x - " "Exit"
  echo
  echo
}  

EXT_MAIN() {
while :
do
 
  clear
  DATE_STR=`date '+%m-%d-%y'`
  EXT_START
  read -p "Enter option: " CHOICE
  case "$CHOICE" in
		1) E_DAT ;;
		2) R_DAT ;;
		3) IMG ;;
		4) SIGN_ZIP ;;
		u|U) UN_MNT ;;
		X|x) clear; echo; echo "Thanks for using."; echo; exit 1;;
		*) cecho R "" "     Invalid option"; sleep 0.3; continue;;
	esac

done
}

#Calling function
EXT_MAIN

